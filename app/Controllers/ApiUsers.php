<?php

namespace App\Controllers;

use App\Controllers\BaseController;

class ApiUsers extends BaseController
{
    protected $apiUsersModel;
    protected $buttonsModel;

    public function __construct()
    {
        $this->apiUsersModel = model('ApiUsersModel');
        $this->buttonsModel = model('ButtonsModel');
    }

    public function index()
    {
        $tenant_id = session()->get('tenant_id');
        $data = [
            'users' => $this->apiUsersModel->getApiUsersByTenant($tenant_id)
        ];
        return view('shared/api_users/index', $data);
    }

    public function create()
    {
        $tenant_id = session()->get('tenant_id');
        $data = [
            'buttons' => $this->buttonsModel->where('tenant_id', $tenant_id)->findAll()
        ];
        return view('shared/api_users/create', $data);
    }

    public function store()
    {
        $tenant_id = session()->get('tenant_id');
        
        // Validate input
        $rules = [
            'name' => [
                'rules' => 'permit_empty|min_length[3]|max_length[255]',
                'errors' => [
                    'min_length' => 'Name must be at least 3 characters long',
                    'max_length' => 'Name cannot exceed 255 characters'
                ]
            ],
            'external_id' => [
                'rules' => 'required|max_length[255]',
                'errors' => [
                    'required' => 'External ID is required',
                    'max_length' => 'External ID cannot exceed 255 characters'
                ]
            ],
            'email' => [
                'rules' => 'permit_empty|valid_email',
                'errors' => [
                    'valid_email' => 'Please enter a valid email address'
                ]
            ],
            'quota' => [
                'rules' => 'required|integer|greater_than[0]',
                'errors' => [
                    'required' => 'Monthly token quota is required',
                    'integer' => 'Monthly token quota must be a whole number',
                    'greater_than' => 'Monthly token quota must be greater than 0'
                ]
            ],
            'buttons' => [
                'rules' => 'required',
                'errors' => [
                    'required' => 'Please select at least one button'
                ]
            ]
        ];

        if (!$this->validate($rules)) {
            return redirect()->back()
                           ->withInput()
                           ->with('errors', $this->validator->getErrors());
        }

        // Create API user
        $userData = [
            'tenant_id' => $tenant_id,
            'external_id' => $this->request->getPost('external_id'),
            'name' => $this->request->getPost('name'),
            'email' => $this->request->getPost('email'),
            'quota' => $this->request->getPost('quota'),
            'active' => 1,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];

        $db = \Config\Database::connect();
        $db->transStart();

        try {
            // Insert API user (user_id will be auto-generated by the model)
            $this->apiUsersModel->insert($userData);
            $user_id = $this->apiUsersModel->getInsertID();

            // Insert button access
            $buttons = $this->request->getPost('buttons');
            if (!is_array($buttons)) {
                throw new \Exception('Invalid button selection');
            }

            $buttonData = [];
            foreach ($buttons as $button_id) {
                // Verify button belongs to tenant
                $button = $this->buttonsModel->where('tenant_id', $tenant_id)
                                           ->where('button_id', $button_id)
                                           ->first();
                if (!$button) {
                    throw new \Exception('Invalid button selection');
                }

                $buttonData[] = [
                    'user_id' => $user_id,
                    'button_id' => $button_id,
                    'created_at' => date('Y-m-d H:i:s')
                ];
            }

            if (!empty($buttonData)) {
                $db->table('api_user_buttons')->insertBatch($buttonData);
            }

            $db->transComplete();

            if ($db->transStatus() === false) {
                throw new \Exception('Failed to create API user');
            }

            return redirect()->to('api-users')
                           ->with('success', 'API user created successfully');
        } catch (\Exception $e) {
            log_message('error', 'Failed to create API user: ' . $e->getMessage());
            return redirect()->back()
                           ->withInput()
                           ->with('error', 'Failed to create API user. Please try again.');
        }
    }

    public function view($user_id)
    {
        $tenant_id = session()->get('tenant_id');
        $user = $this->apiUsersModel->where('tenant_id', $tenant_id)
                                   ->where('user_id', $user_id)
                                   ->first();

        if (!$user) {
            return redirect()->to('api-users')
                           ->with('error', 'API user not found');
        }

        // Get user's button access and usage statistics
        $users = $this->apiUsersModel->getApiUsersByTenant($tenant_id);
        foreach ($users as $u) {
            if ($u['user_id'] === $user_id) {
                $user = $u;
                break;
            }
        }

        $data = [
            'user' => $user,
            'buttons' => $this->buttonsModel->where('tenant_id', $tenant_id)->findAll()
        ];

        return view('shared/api_users/view', $data);
    }

    public function toggleStatus($user_id)
    {
        $tenant_id = session()->get('tenant_id');
        
        // Validate user belongs to tenant
        $user = $this->apiUsersModel->where('tenant_id', $tenant_id)
                                   ->where('user_id', $user_id)
                                   ->first();

        if (!$user) {
            return $this->response->setJSON([
                'success' => false,
                'message' => 'API user not found'
            ]);
        }

        try {
            // Toggle status
            $newStatus = $this->request->getJSON()->active;
            $this->apiUsersModel->update($user_id, [
                'active' => $newStatus,
                'updated_at' => date('Y-m-d H:i:s')
            ]);

            return $this->response->setJSON([
                'success' => true,
                'message' => 'Status updated successfully'
            ]);
        } catch (\Exception $e) {
            log_message('error', 'Failed to update API user status: ' . $e->getMessage());
            return $this->response->setJSON([
                'success' => false,
                'message' => 'Failed to update status'
            ]);
        }
    }

    public function delete($user_id)
    {
        $tenant_id = session()->get('tenant_id');
        
        // Validate user belongs to tenant
        $user = $this->apiUsersModel->where('tenant_id', $tenant_id)
                                   ->where('user_id', $user_id)
                                   ->first();

        if (!$user) {
            return redirect()->to('api-users')
                           ->with('error', 'API user not found');
        }

        try {
            // Delete API user (cascades to api_user_buttons)
            $this->apiUsersModel->delete($user_id);

            return redirect()->to('api-users')
                           ->with('success', 'API user deleted successfully');
        } catch (\Exception $e) {
            log_message('error', 'Failed to delete API user: ' . $e->getMessage());
            return redirect()->to('api-users')
                           ->with('error', 'Failed to delete API user');
        }
    }
}
